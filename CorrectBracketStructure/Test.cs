using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NUnit.Framework;

namespace CorrectBracketStructure
{
    [TestFixture]

    class TestTask1
    {
        Operation operation = new Operation();

        [Test]
        [Description("Verifies that checkup braces structure function works correct.")]
        [TestCase("()", true)]
        [TestCase("(())", true)]
        [TestCase("(()(()))", true)]
        [TestCase("((((()))))", true)]
        [TestCase("(((((((((((())))))))))))", true)]
        [TestCase("(((()()()(())(())((((()))))())))", true)]
        [TestCase("(((((()()(())((()()()()))()()())))))", true)]
        [TestCase("(", false)]
        [TestCase(")", false)]
        [TestCase(")(", false)]
        [TestCase(")()(", false)]
        [TestCase("()))((()", false)]
        [TestCase("())))(((()", false)]
        [TestCase("()))((()))((()))((()", false)]
        [TestCase("))()())((((())))(((((", false)]
        [TestCase(")()(()()(()))())()())(()()()()())(()", false)]
        [TestCase(")(()))(()())()))()())()))))))(((())())()()())", false)]
        [TestCase("(((((((((((((((((((((((((((((((((((((((((((((", false)]
        [TestCase("((()))((((()()()()()((((((((((((((()))))((()())))))))))))((((((()()()()()", false)]
        [TestCase("(()()()())))(()()((()())))(((((((((((())))(()(()()))))(()()))))(())))))))))))))))()())()()", false)]
        public void CorrectStructureBracesTest(string s, bool expected)
        {
            bool result = operation.CheckCorrectBracketStructure(s);
            Assert.AreEqual(expected, result);
        }
    }


    class TestTask2
    {
        Operation operation = new Operation();

        private static readonly IEnumerable<TestCaseData> _testPairs = GetPairsCases();

        private static IEnumerable<TestCaseData> GetPairsCases()
        {
            yield return new TestCaseData(
                new int[]
                {
                    45, 50, 54, 60, 9365, 4977, 339, 4198, 6757, 402, 3464,  2052, 2008, 35, 48, 85, 88, 16, 66, 9200, 6283, 1228, 75, 81, 2547,
                    100, 108, 135, 4050, 15, 150, 162, 6, 180, 225, 860, 270, 4, 300, 324, 405, 450, 540,675, 6533, 810,
                    9798, 5093, 698, 8955, 5643, 5225, 6, 2902, 9810, 5890, 8359, 9458, 5695, 4354, 71, 75, 13, 19, 5455, 817, 9751, 3063, 8999,
                    900, 1350, 1, 1620, 2025, 90, 83, 8100, 2700, 387, 828, 7860, 950, 6200, 9427, 7479, 574, 6013, 2, 3,
                    2480, 20, 25, 2162, 3143, 27, 30, 36, 3, 81, 37, 2, 7, 9, 33, 8, 29, 87, 36, 26,  92, 38, 52,
                    6176, 5661, 41, 32, 53, 82,  9027, 3146, 2504, 9165, 2747, 7011,  7893, 2011, 1538,
                    6535, 6690,  85, 88, 16, 66, 19, 25, 6, 1999, 893, 5072, 5789,1009, 7885, 7931, 8615, 9761, 1733, 5718, 7935, 8324, 5130, 5854, 1688,
                    9587, 5021, 451, 5066, 3509,  5, 3344 , 9, 10, 12, 2749, 4 ,98 ,95 ,64 ,50 ,18, 8454, 1534, 2709, 7704, 7995, 2871
                },
                new Dictionary<int, int>
                {
                  { 1, 8100 }, { 2, 4050 },
                  { 3, 2700 }, { 4, 2025 },
                  { 5, 1620 }, { 6, 1350 },
                  { 9, 900 },  { 10, 810 },
                  { 12, 675 }, { 15, 540 },
                  { 18, 450 }, { 20, 405 },
                  { 25, 324 }, { 27, 300 },
                  { 30, 270 }, { 36, 225 },
                  { 45, 180 }, { 50, 162 },
                  { 54, 150 }, { 60, 135 },
                  { 75, 108 }, { 81, 100 },
                  { 90, 90 }
                }, 8100);

            yield return new TestCaseData(
               new int[]
               {
                    8567601, 45, 50, 54, 5711734 ,588, 60, 8376, 49098, 136808, 9365, 3263848, 4977, 1631924, 339, 4198, 2447886 , 1396, 6757, 402, 3464,  2052, 2008, 35, 48,196, 85, 88, 16, 66, 9200, 6283, 1228, 75, 81, 2547,
                    100, 108, 135, 4050, 815962, 15, 150,1002,102606 ,162, 6, 34202,180,1223943,225, 860, 270, 4, 300, 324, 405,4008, 450, 540,675, 174849,6533, 810,32732,
                    9798, 5093, 698,9791544,9352,392,2443,4188, 1047,8955, 5643, 501,5225, 6, 2902,147 ,9810, 5890, 8359,699396, 9458, 668,5695,7329,4354,56, 65464,71, 75, 13, 466264,28, 19, 410424,5455, 817, 9751, 3063, 8999,
                    900, 1350, 1, 22846936, 1620,9772, 2025,334,29316, 7014,90, 84,83, 8100,167 ,2700, 387,8183, 828, 7860, 950, 6200, 9427,24549, 7479, 574, 6013, 2004,2, 3,196392,4676,
                    2480, 20, 25, 34270404,28056, 16366,2162, 3143, 698,27,2094,3507,168, 42, 2338,30, 36, 3, 81, 37, 2, 7, 68540808 , 9, 33, 8,17101, 29, 87, 12,36, 349698,26,  92, 51303,38,98, 52, 2855867,
                    6176, 5661, 8, 14, 41, 17135202, 1,2792,4886, 58632,32, 7,1169,53, 233132,82,  9027,14658, 3146, 2504, 9165, 2747, 294,7011, 1176, 7893, 2011, 98196,1538,349,
                    6535, 6690, 11423468, 85, 19544,88, 16, 21,58283, 66, 19, 25,68404, 6, 1999, 893, 5072, 5789,1009, 7885, 7931, 8615, 9761, 1733, 5718, 7935, 8324, 5130, 5854, 1688,
                    9587, 5021, 451, 5066, 3509, 24, 205212,4895772, 14028,1336, 5, 116566,1398792,3344 , 9, 10, 12, 2749, 4 ,98 ,95 ,64 ,50 ,49,18, 8454, 407981,1534, 2709, 7704, 7995, 2871
               },
               new Dictionary<int, int>
               {
                   { 1, 68540808 }, { 2 , 34270404 },
                   { 3 , 22846936 }, { 4,  17135202 },
                   { 6,  11423468 }, { 7,  9791544 },
                   { 8,  8567601 }, { 12,  5711734 },
                   { 14,  4895772 }, { 21,  3263848 },
                   { 24,  2855867 }, { 28,  2447886 },
                   { 42, 1631924 }, { 49,  1398792 },
                   { 56,  1223943 }, { 84, 815962 },
                   { 98 , 699396 }, { 147, 466264 },
                   { 167 , 410424 }, { 168,  407981 },
                   { 196 , 349698 }, { 294 , 233132 },
                   { 334, 205212 }, { 349,  196392 },
                   { 392 ,174849 }, { 501,  136808 },
                   { 588 , 116566 }, { 668 , 102606 },
                   { 698 , 98196 }, { 1002 , 68404 },
                   { 1047 ,65464 }, { 1169 , 58632 },
                   { 1176 , 58283 }, { 1336,  51303 },
                   { 1396, 49098 }, { 2004,  34202 },
                   { 2094,  32732 }, { 2338,  29316 },
                   { 2443 , 28056 }, { 2792,  24549 },
                   { 3507 , 19544 }, { 4008,  17101 },
                   { 4188,  16366 }, { 4676 , 14658 },
                   { 4886 , 14028 }, { 7014 , 9772 },
                   { 7329 , 9352 }, { 8183 , 8376}
                   }, 68540808);
        }

        [Test, TestCaseSource(nameof(_testPairs))]
        public void TestPairsMethod1(int[] array, Dictionary<int, int> expected_pairs, int Number)
        {
            var result = operation.FindPairsMethodOne(array, Number);
            Assert.IsTrue(operation.DictionaryCompare(expected_pairs, result));
        }


        [Test, TestCaseSource(nameof(_testPairs))]
        public void TestPairsMethod2(int[] array, Dictionary<int, int> expected_pairs, int Number)
        {
            var result = operation.FindPairsMethodTwo(array, Number);
            Assert.IsTrue(operation.DictionaryCompare(expected_pairs, result));
        }
    }
}

     



